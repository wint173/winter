#include "IMU_Fusion_SYC.h"  // IMUライブラリをインクルード
#include <SD.h>              // SDカードライブラリをインクルード
#include <SPI.h>             // SPI通信ライブラリをインクルード

// IMUオブジェクトの作成
IMU imu(Wire);

// モーター制御用ピンの定義
const int PWMA = 9;  // モーターAのPWMピン
const int AIN1 = 10; // モーターAの方向制御ピン1
const int AIN2 = 11; // モーターAの方向制御ピン2
const int PWMB = 15; // モーターBのPWMピン
const int BIN1 = 13; // モーターBの方向制御ピン1
const int BIN2 = 14; // モーターBの方向制御ピン2
const int STBY = 12; // モーターのスタンバイ制御ピン

// その他のピン定義
const int PULLUP_PIN = 28; // プルアップ入力ピン（シーケンス用）
const int OUTPUT_PIN = 1;  // アクション制御用出力ピン

// SDカード通信ピンの定義
#define SD_MISO  16  // SDカードのMISOピン
#define SD_CS    17  // SDカードのCSピン
#define SD_SCK   18  // SDカードのSCKピン
#define SD_MOSI  19  // SDカードのMOSIピン
#define NAME     "Running" // ファイル名のベース名

// SDカード操作用
File myFile;
int number = 1; // ファイル番号
String str;
String filename;

// モーター制御の設定
const int BASE_SPEED = 128;      // モーターの基本速度
const int MAX_SPEED_DIFF = 64;  // モーター速度差の最大値
const int motorDiff = 11;       // モーター間の補正値

// システム状態管理用
bool flightPinState = HIGH;  // ピン状態フラグ
unsigned long pinLowTime = 0; // ピンがLOWになった時間
bool actionTriggered = false; // アクションが実行されたかのフラグ

// キャリブレーション用
float referenceAngle = -1;  // 基準角度
unsigned long stableStartTime = 0; // 安定状態の開始時間
bool isCalibrated = false;  // キャリブレーション状態
const float angleTolerance = 0.5;  // 許容角度の範囲
const unsigned long stableTimeRequired = 1000;  // 安定に必要な時間(ms)

// 新しいファイルを作成する関数
void createNewFile() {
  while (true) {
    filename = NAME + (String)number + ".txt"; // ファイル名の生成
    if (!SD.exists(filename.c_str())) {        // ファイルが存在しない場合
      myFile = SD.open(filename, FILE_WRITE);  // ファイルを作成
      if (myFile) {
        Serial.print("New file created: ");
        Serial.println(filename);
        break;
      } else {
        Serial.println("Failed to create file!");
        return;
      }
    }
    number++;
  }
}

// シーケンス2を実行する関数
void sequence2() {
  digitalWrite(OUTPUT_PIN, HIGH); // 出力ピンをHIGHに設定
  delay(3000);                   // 5秒待機
  digitalWrite(OUTPUT_PIN, LOW); // 出力ピンをLOWに戻す
  delay(30000);
　imu.MPU6050_CalcGyroOffsets();
}

// モーターを停止する関数
void stopMotors() {
  digitalWrite(STBY, LOW);     // スタンバイモードに設定
  analogWrite(PWMA, 0);        // モーターAの速度を0に設定
  analogWrite(PWMB, 0);        // モーターBの速度を0に設定
}

// モーターを有効にする関数
void enableMotors() {
  digitalWrite(STBY, HIGH);    // スタンバイ解除
}

// 現在の角度と基準角度の相対角度を計算する関数
float calculateRelativeAngle(float current, float reference) {
  float diff = current - reference;
  if (diff > 180) diff -= 360;
  if (diff < -180) diff += 360;
  return diff;
}

// モーター速度を設定する関数
void setMotorSpeeds(float angleError) {
  int speedDiff = map(constrain(abs(angleError), 0, 45), 0, 45, 0, MAX_SPEED_DIFF);
  int speedA, speedB;

  // 角度誤差に応じて速度を調整
  if (angleError < 0) {
    speedA = BASE_SPEED + speedDiff * 3 + motorDiff;
    speedB = BASE_SPEED - speedDiff * 3;
  } else if (angleError > 0) {
    speedA = BASE_SPEED - speedDiff * 3;
    speedB = BASE_SPEED + speedDiff * 3 + motorDiff;
  } else {
    speedA = BASE_SPEED;
    speedB = BASE_SPEED;
  }

  analogWrite(PWMA, speedA); // モーターAの速度を設定
  analogWrite(PWMB, speedB); // モーターBの速度を設定

  // デバッグ用のシリアル出力
  Serial.print("Current Angle: ");
  Serial.print(angleError);
  Serial.print(" SpeedA: ");
  Serial.print(speedA);
  Serial.print(" SpeedB: ");
  Serial.println(speedB);

  // SDカードにデータを記録
  unsigned long currentTime = millis();
  String data = String(currentTime) + " " +
                String(angleError) + " " +
                String(imu.getaccx()) + " " +
                String(imu.getaccy()) + " " +
                String(imu.getaccz()) + " " +
                String(imu.getgyrox()) + " " +
                String(imu.getgyroy()) + " " +
                String(imu.getgyroz()) + " " +
                String(imu.getQMCRawx()) + " " +
                String(imu.getQMCRawy()) + " " +
                String(imu.getQMCRawz());
  myFile.println(data);
  myFile.flush(); // データを即時保存
}

// 初期設定
void setup() {
  Serial.begin(9600);           // シリアル通信の初期化
  Wire.begin();                 // I2C通信の初期化

  // SDカードの初期化
  SPI.setTX(SD_MOSI);
  SPI.setSCK(SD_SCK);
  SPI.setRX(SD_MISO);
  SPI.setCS(SD_CS);
  if (!SD.begin(SD_CS, SPI)) {
    Serial.println("SD Card initialization failed!");
    return;
  }
  createNewFile();              // 新しいファイルを作成

  // IMUの初期化
  imu.QMC5883L_SetOffsets(147.00, -443.00, -152.00);
  imu.QMC5883L_SetScales(1.10, 1.14, 0.82);
  imu.Heading_Offset(360);
  imu.begin(CHOOSE_ALL);
  // ピンモードの設定
  pinMode(PWMA, OUTPUT);
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMB, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(STBY, OUTPUT);
  digitalWrite(STBY, HIGH); // モーターを有効化
  digitalWrite(AIN1, HIGH);
  digitalWrite(AIN2, LOW);
  digitalWrite(BIN1, HIGH);
  digitalWrite(BIN2, LOW);
  pinMode(PULLUP_PIN, INPUT_PULLUP);
  pinMode(OUTPUT_PIN, OUTPUT);

  Serial.println("Setup complete!");
}

// メインループ
void loop() {
  imu.Calculate();                 // IMUデータを計算
  float currentAngle = imu.Data_Fusion(0.1); // IMUから融合された角度データを取得

  static unsigned long pinLowTime = 0; // ピンLOW状態の時間を記録
  static bool sequenceStarted = false; // シーケンス開始フラグ
  int pinState = digitalRead(PULLUP_PIN); // PULLUPピンの状態を取得

  if (pinState == HIGH) {
    if (!sequenceStarted && pinLowTime == 0) {
      pinLowTime = millis(); // ピンLOW状態の開始時間を記録
    }
    if (!sequenceStarted && millis() - pinLowTime >= 30000) {
      sequence2(); // シーケンス2を実行
      sequenceStarted = true;
    }
  } else {
    if (sequenceStarted || pinLowTime != 0) {
      pinLowTime = 0;
      sequenceStarted = false;
    }
  }

  if (sequenceStarted) {
    if (!isCalibrated) {
      if (referenceAngle == -1) {
        referenceAngle = currentAngle;
        stableStartTime = millis();
        Serial.println("Starting calibration...");
      } else {
        if (abs(currentAngle - referenceAngle) <= angleTolerance) {
          if (millis() - stableStartTime >= stableTimeRequired) {
            isCalibrated = true;
            Serial.print("Calibration complete! Reference Angle: ");
            Serial.println(referenceAngle);
            enableMotors(); // モーターを有効化
          }
        } else {
          referenceAngle = currentAngle;
          stableStartTime = millis();
          Serial.println("Recalibrating...");
        }
      }
    } else {
      float relativeAngle = calculateRelativeAngle(currentAngle, referenceAngle);
      setMotorSpeeds(relativeAngle); // モーター速度を設定
    }
    delay(5); // データ更新間隔
  }
}
